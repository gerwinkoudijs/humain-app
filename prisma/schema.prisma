generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model llamaindex_embedding {
  id          String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id String?                @db.VarChar
  collection  String?                @db.VarChar
  document    String?
  metadata    Json?                  @default("{}")
  embeddings  Unsupported("vector")?

  @@index([collection], map: "idx_llamaindex_embedding_collection")
  @@index([external_id], map: "idx_llamaindex_embedding_external_id")
}

model documents {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String?  @db.VarChar
  summary    String?  @db.VarChar
  category   String?
  status     String?  @db.VarChar
  created_at DateTime @default(now()) @db.Timestamp(6)

  @@index([name], map: "idx_documents_name")
  @@index([category], map: "idx_documents_category")
}

model settings {
  name        String   @id @db.VarChar
  description String?  @db.VarChar
  value       String?  @db.VarChar
  category    String?  @db.VarChar
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
}

enum MessageStatus {
  NEW
  PROCESSING
  COMPLETED
  FAILED
  ARCHIVED
  DELETED
}

enum MessageFeedback {
  NEUTRAL
  GOOD
  BAD
  SPAM
}

model messages {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  external_id     String?  @db.VarChar
  conversation_id String?  @db.VarChar
  type            String   @db.VarChar
  subject         String?  @db.VarChar
  from            String?  @db.VarChar
  to              String?  @db.VarChar
  content_md      String?  @db.VarChar
  content_raw     String?  @db.VarChar
  date            DateTime

  ai_summary        String? @db.VarChar
  ai_follow_up      String? @db.VarChar
  ai_reply          String? @db.VarChar
  ai_trello_title   String? @db.VarChar
  ai_trello_content String? @db.VarChar
  ai_categories     String? @db.VarChar
  ai_role           String? @db.VarChar
  ai_department     String? @db.VarChar
  ai_urgency        String? @db.VarChar

  status MessageStatus @default(NEW)

  feedback MessageFeedback @default(NEUTRAL)

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  @@index([external_id], map: "idx_messages_external_id")
  @@index([conversation_id], map: "idx_messages_conversation_id")
  @@index([status], map: "idx_messages_status")
}
